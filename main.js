!function(){"use strict";class e{constructor(e,t,s,n,i){this.isLiked=e.isLiked,this._name=e.name,this._link=e.link,this._cardSelector=t,this._handleCardClick=s,this._handleDeleteClick=n,this._handleCardLike=i,this._cardElement=document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(!0),this._likeIconElement=this._cardElement.querySelector(".card__like-icon"),this._trashButtonElement=this._cardElement.querySelector(".card__trash"),this._imageElement=this._cardElement.querySelector(".card__image")}_setEventListeners(){this._likeIconElement.addEventListener("click",(e=>{e.preventDefault(),this._handleCardLike()})),this._trashButtonElement.addEventListener("click",(()=>{this._handleDeleteClick()})),this._imageElement.addEventListener("click",(e=>{e.preventDefault(),this._handleOpenDisplay()}))}_handleDeleteCard(){this._cardElement.remove(),this._cardElement=null}_handleLikeIcon(){this.isLiked?this._likeIconElement.classList.add("card__like-icon_active"):this._likeIconElement.classList.remove("card__like-icon_active")}showLikes(e){this.isLiked=e,this._handleLikeIcon()}_handleOpenDisplay(){this._handleCardClick(this._link,this._name)}deleteCardElement(){this._handleDeleteCard()}getView(){const e=this._cardElement.querySelector(".card__image"),t=this._cardElement.querySelector(".card__title");return e.src=this._link,e.alt=this._name,t.textContent=this._name,this._setEventListeners(),this._cardElement}}class t{constructor(e,t){this._settings=e,this._formElement=t}_showInputError(e,t){const s=this._formElement.querySelector(`.${e.id}-error`);e.classList.add(this._settings.inputErrorClass),s.textContent=t,s.classList.add(this._settings.errorClass)}_hideInputError(e,t){const s=this._formElement.querySelector(`.${e.id}-error`);e.classList.remove(this._settings.inputErrorClass),s.classList.remove(t),s.textContent=null}_checkInputValidity(e){e.validity.valid?this._hideInputError(e):this._showInputError(e,e.validationMessage)}_hasInvalidInput(e){return!!e&&e.some((e=>!e.validity.valid))}toggleButtonState(){const e=Array.from(this._formElement.querySelectorAll(this._settings.inputSelector)),t=this._formElement.querySelector(this._settings.submitButtonSelector);this._hasInvalidInput(e)?(t.classList.add(this._settings.inactiveButtonClass),t.setAttribute("disabled","true")):(t.classList.remove(this._settings.inactiveButtonClass),t.removeAttribute("disabled"))}_setEventListeners(){const e=Array.from(this._formElement.querySelectorAll(this._settings.inputSelector)),t=this._formElement.querySelector(this._settings.submitButtonSelector);this.toggleButtonState(e,t),e.forEach((s=>{s.addEventListener("input",(()=>{this._checkInputValidity(s),this.toggleButtonState(e,t)}))}))}enableValidation(){this._formElement.addEventListener("submit",(function(e){e.preventDefault()})),this._setEventListeners()}}class s{constructor(e){this._popup=document.querySelector(e),this._popupCloseButton=this._popup.querySelector(".modal__close-button")}open(){this._popup.classList.add("modal_opened"),document.addEventListener("keydown",this._handleEscClose)}close(){this._popup.classList.remove("modal_opened"),document.removeEventListener("keydown",this._handleEscClose)}_handleEscClose=e=>{"Escape"===e.key&&this.close()};setEventListeners(){this._popup.addEventListener("mousedown",(e=>{e.target.classList.contains("modal")&&this.close()})),this._popupCloseButton.addEventListener("click",(()=>{this.close()}))}}class n extends s{constructor(e,t,s){super(e,s),this._popupForm=this._popup.querySelector(".modal__container"),this._handleFormSubmit=t,this._inputs=this._popupForm.querySelectorAll(".modal__input"),this.saveButton=this._popupForm.querySelector(".modal__save-button"),this._loadingText=s}_getInputValues(){const e={};return this._inputs.forEach((t=>{e[t.name]=t.value})),e}setEventListeners(){super.setEventListeners(),this._popupForm.addEventListener("submit",(e=>{e.preventDefault();const t=this._getInputValues();this._handleFormSubmit(t),this.close()}))}showLoading(){this.saveButton.textContent=this._loadingText}hideLoading(e){this.saveButton.textContent=e}close(){this._popupForm.reset(),super.close()}}class i{constructor(e,t){let{items:s,renderer:n}=e;this._items=s,this._renderer=n,this._cardElements=t}renderItems(){this._items.forEach((e=>{this._renderer(e)}))}addItem(e){this._cardElements.prepend(e)}}const r={inputErrorClass:"modal__input_type_error",errorClass:"modal__input-error_active",inactiveButtonClass:"modal__save-button_inactive",formSelector:".modal__container",inputSelector:".modal__input",submitButtonSelector:".modal__save-button",fieldsetSelector:".modal__fieldset"},o=document.querySelector(".gallery__cards"),a=document.querySelector("#name-input"),l=(document.querySelector("#title-input"),document.querySelector("#image-input"),document.querySelector("#about-input")),c=document.querySelector(".img-modal__container"),d=document.querySelector(".profile__occupation"),h=document.querySelector(".profile__username"),u=document.querySelector(".profile__avatar"),_=document.querySelector(".profile-modal__container"),m=(document.querySelector(".delete-modal"),document.querySelector(".modal__confirm-button"),document.querySelector(".avatar-modal__container")),p=document.querySelector(".profile__edit-avatar-icon"),E=document.querySelector(".profile__edit-button"),v=document.querySelector(".profile__add-button");let f,L;const g=new t(r,c);g.enableValidation(),new t(r,m).enableValidation();const S=new class{constructor(e,t,s){this._nameElement=e,this._descriptionElment=t,this._avatarElement=s}getUserInfo(){const e={};return e.name=this._nameElement.textContent,e.description=this._descriptionElment.textContent,e}setUserInfo(e,t){this._nameElement.textContent=e,this._descriptionElment.textContent=t}setUserAvatar(e){this._avatarElement.src=e}}(h,d,u),y=new n(".profile-modal",(function(e){let{name:t,description:s}=e;y.showLoading(),I.updateUserInfo(t,s).then((()=>{S.setUserInfo(t,s),y.close()})).catch(console.error).finally((()=>{y.hideLoading("Save")}))}),"Saving..."),k=new n(".avatar-modal",(function(e){k.showLoading(),I.updateUserAvatar(e.link).then((()=>{S.setUserAvatar(e.link),k.close()})).catch(console.error).finally((()=>{k.hideLoading("Save")}))}),"Saving..."),C=new n(".img-modal",(function(e){let{name:t,link:s}=e;C.showLoading(),I.createCards({name:t,link:s}).then((e=>{const t=U(e);L.addItem(t),C.close()})).catch(console.error).finally((()=>{C.hideLoading("Save")}))}),"Saving..."),q=new class extends s{constructor(e){super(e),this._popupImage=this._popup.querySelector(".modal__image-display"),this._caption=this._popup.querySelector(".modal__paragraph")}open(e,t){this._popupImage.src=e,this._popupImage.alt=t,this._caption.textContent=t,super.open()}}(".display-modal"),b=new class extends s{constructor(e,t){super(e),this._popupForm=this._popup.querySelector(".modal__container"),this._confirmButton=this._popupForm.querySelector(".modal__confirm-button"),this._confirmButtonText=this._confirmButton.textContent,this._loadingText=t}close(){super.close()}setConfirmAction(e){this._handleFormSubmit=e}showLoading(){this._confirmButton.textContent=this._loadingText}hideLoading(e){this._confirmButton.textContent=e}setEventListeners(){super.setEventListeners(),this._confirmButton.addEventListener("click",(()=>{this._handleFormSubmit&&this._handleFormSubmit()}))}}(".delete-modal","Deleting...");b.setEventListeners();const I=new class{constructor(e){this._baseUrl=e.baseUrl,this._headers=e.headers}async _handleApiResponses(e){return e.ok?await e.json():Promise.reject(`Error: ${e.status}`)}async _request(e,t){try{const s=await fetch(e,t);return this._handleApiResponses(s)}catch(e){throw console.error("There is an API issue"),e}}getInitialCards(){return this._request(`${this._baseUrl}/cards`,{headers:this._headers})}createCards(e){let{name:t,link:s}=e;return this._request(`${this._baseUrl}/cards`,{method:"POST",headers:this._headers,body:JSON.stringify({name:t,link:s})})}deleteCard(e){return this._request(`${this._baseUrl}/cards/${e}`,{method:"DELETE",headers:this._headers})}updateLikes(e,t){return this._request(`${this._baseUrl}/cards/${e}/likes`,{method:t?"DELETE":"PUT",headers:this._headers})}getUserInfo(){return this._request(`${this._baseUrl}/users/me`,{method:"GET",headers:this._headers})}updateUserInfo(e,t){return this._request(`${this._baseUrl}/users/me`,{method:"PATCH",headers:this._headers,body:JSON.stringify({name:e,about:t})})}updateUserAvatar(e){return this._request(`${this._baseUrl}/users/me/avatar`,{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:e})})}}({baseUrl:"https://around-api.en.tripleten-services.com/v1",headers:{authorization:"d15f0643-7ba6-4697-8a04-5f83082b3085","Content-Type":"application/json"}});function w(e,t){q.open(e,t)}function U(t){const s=new e(t,"#profile__card-template",w,(function(){b.setConfirmAction((()=>{b.showLoading(),I.deleteCard(t._id).then((e=>{s.deleteCardElement(e._id),b.close()})).catch(console.error).finally((()=>{b.hideLoading("Yes")}))})),b.open()}),(function(){I.updateLikes(t._id,s.isLiked).then((e=>{s.showLikes(e.isLiked),s.isLiked=e.isLiked})).catch(console.error)}));return s.showLikes(t.isLiked),s.getView()}Promise.all([I.getUserInfo(),I.getInitialCards()]).then((e=>{let[t,s]=e;S.setUserInfo(t.name,t.about),S.setUserAvatar(t.avatar),f=t._id,console.log("user info:",t),console.log("Initial cards:",s),L=new i({items:s,renderer:e=>{const t=U(e);L.addItem(t)}},o),L.renderItems()})).catch(console.error),E.addEventListener("click",(function(){const{name:e,description:t}=S.getUserInfo();a.value=e,l.value=t,y.open()})),y.setEventListeners(),v.addEventListener("click",(function(e){g.toggleButtonState(),C.open()})),C.setEventListeners(),q.setEventListeners(),k.setEventListeners(),p.addEventListener("click",(function(){g.toggleButtonState(),k.open()})),new t(r,_).enableValidation()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,